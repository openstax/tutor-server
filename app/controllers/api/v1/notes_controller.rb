# coding: utf-8
class Api::V1::NotesController < Api::V1::ApiController
  before_action :get_roles, only: [ :index, :highlighted_sections ]
  before_action :get_note, only: [ :update, :destroy ]

  resource_description do
    api_versions "v1"
    short_description 'Represents a note added by the student on a page'
    description <<-EOS
      Stores text selection (notes) on a book's content.
      Notes are generated by users as they highlight content,
      and then are fetched and re-stored when the content is reloaded.
    EOS
  end

  ####################################################################
  ## index                                                          ##
  ####################################################################
  api :GET, '/api/pages/:page_id/notes', 'Lists all notes for a page with the given UUID'
  description <<-EOS
    Lists all the notes added by the student to the page with the given UUID

    #{json_schema(Api::V1::NotesRepresenter, include: :readable)}
  EOS
  def index
    notes = Content::Models::Note.joins(:page).where(
      role: @roles, page: { uuid: params[:page_id] }
    )

    respond_with notes, represent_with: Api::V1::NotesRepresenter
  end

  ####################################################################
  ## create                                                         ##
  ####################################################################
  api :POST, '/api/pages/:page_id/notes', 'Creates a note for a page with the given UUID'
  description <<-EOS
    Creates a new note for the current student and page UUID

    #{json_schema(Api::V1::NoteRepresenter, include: :writeable)}
  EOS
  def create
    standard_create Content::Models::Note.new, Api::V1::NoteRepresenter do |note|
      course = CourseProfile::Models::Course.find note.course_id

      role_result = ChooseCourseRole.call user: current_human_user, course: course, role_id: nil
      raise(SecurityTransgression, :invalid_role) unless role_result.errors.empty?

      note.role = role_result.outputs.role
      note.page = course.ecosystems.first.pages.find_by uuid: params[:page_id]
    end
  end

  ####################################################################
  ## update                                                         ##
  ####################################################################
  api :PUT, '/api/notes/:id', 'Updates a note'
  description <<-EOS
    Updates the note with the given id

    #{json_schema(Api::V1::NoteRepresenter, include: :writeable)}
  EOS
  def update
    standard_update @note, Api::V1::NoteRepresenter
  end

  ####################################################################
  ## destroy                                                        ##
  ####################################################################
  api :DELETE, '/api/notes/:id', 'Deletes a note'
  description <<-EOS
    Deletes the note with the given id
  EOS
  def destroy
    standard_destroy @note, Api::V1::NoteRepresenter
  end

  ####################################################################
  ## highlighted_sections                                           ##
  ####################################################################
  api :GET, '/api/books/:book_uuid/highlighted_sections',
            'Shows a summary of sections highlighted by the student'
  description <<-EOS
    List all sections highlighted by the student

    #{json_schema(Api::V1::HighlightRepresenter, include: :readable)}
  EOS

  def highlighted_sections
    pages = Content::Models::Page.select(:id, :title, :uuid, :book_location, :created_at, 'COUNT(*) as "notes_count"')
      .joins(:book, :notes)
      .where(book: { uuid: params[:book_uuid] }, notes: { role: @roles })
      .group(:id)
      .sort_by(&:created_at).reverse
      .uniq(&:uuid)
      .sort_by(&:book_location)

    respond_with pages, represent_with: Api::V1::HighlightRepresenter
  end

  protected

  def get_roles
    @roles = current_human_user.roles.preload(:teacher, :teacher_student, student: :period)
                                     .reject do |role|
      role.student? ?
        role.student.nil? || role.student.dropped? ||
          role.student.period.nil? || role.student.period.archived? :
        role.course_member.nil? || role.course_member.deleted?
    end
  end

  def get_note
    @note = Content::Models::Note.find(params[:id])
  end
end
